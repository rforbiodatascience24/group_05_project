---
title: "Project"
author: "Miguel Blanco, Xavi Chapatte, Luis Martín"
format: html
editor: visual
---

### Load libraries

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(readxl)
library(stringr)

```

Load Data

```{r, warning=FALSE, message=FALSE}
data <- read_tsv("../data/01_dat_load.tsv")
```

Change values \[null\] for NAs

```{r}

#Notice that na_if function has to work with the same type of values at the time. For example in this df we have both character and numeric values, so we have to do it in 2 times


#The function takes the data (data) and the vector of all the values that we want to be considered as NAs (na_vector). This na_vector should be specified as 
# c("null", "-"...)
NA_values_replace <- function(data, na_vector){
  data |> 
    mutate(across(where(is.character), ~ case_when 
          (. %in% na_vector ~ NA,
          TRUE ~ .
          )))
}

data <- NA_values_replace(data = data, 
                          na_vector = c("[null]", "/", "-"))

```

Proportions of NA in each column

```{r}

#The function takes the data as only argument and return the proportion of NA values of each column in the data 
NA_prop <- function(data) {
  data |> 
    select(where(anyNA)) |> 
    summarise(across(everything(), ~ mean(is.na(.)), .names = "{col}")) |> 
    pivot_longer(everything(), values_to = "na_proportion", names_to = "column")
}

data_NA_proportion <- NA_prop(data)
```

Remove empty columns that were introduced as separators. 
```{r}
data <- data |> 
  select(-"Pulmonary CT condition",
         -"D1 blood routine upon admission",
         -"D7 blood routine",
         -"Liver enzyme D1",
         -"Coagulation index D1",
         -"Inflammatory indicator D1",
         -"Blood gas analysis",
         -"Virus nucleic acid test CT value")
```

Relocate columns Age range and Age over 65 to the first columns of the dataset.

```{r}
data <- data |> 
  relocate("Age ranges[years]", "Age over 65(1,YES; 2, NO)", .after = "Number")
```

Rename some columns

```{r}
data <- data |> 
  rename(
    "Basic_diseases" = "Basic diseases (1 hypertension, 2 diabetes, 3 cardiovascular diseases, 4 cerebrovascular diseases, 5 COPD, 6 immunodeficiency (such as AIDS, hormone, immunosuppressant use history), 7 malignant tumor, 8 other 9 chronic kidney disease",
    "Age range" = "Age ranges[years]",
    "Age over 65" = "Age over 65(1,YES; 2, NO)",
    "Fever days" = "Fever days (D1-D7)[days]",
    "Affected lung lobes 1" = "Number of affected lung lobes 1",
    "Affected lung lobes 2" = "Number of affected lung lobes 2",
    "Imaging Improvement > 25% (after 1 week)" = "Does the imaging improve by more than 25% after one week (1 yes 2 no)",
    "APACHE Score (ICU Admission)" = "APACHEII score (admission to ICU)",
    "Usage days" = "Usage days[days]",
    "Azvudine" = "Azvudine (1 is 0)",
    "Hormones" = "Hormones (1 Yes 0 No)",
    "Hormone usage days" = "Hormone usage days[days]",
    "Anticoagulant days" = "Anticoagulant days[days]",
    "Death" = "Death (1 Yes 2 No)",
    "Symptoms" = "Symptoms (1. Whole body, 2. Respiratory, 3. Nervous, 4. Cardiovascular, 5. Gastrointestinal, 6. Other)")
```

Create function to change dirty columns with multiple values to clean binary columns

```{r}
process_dirty_cols <- function(data, column, rename_map) {
  column_sym <- ensym(column)
  
  data_processed <- data |> 
    mutate(
      !!column_sym := str_replace_all(!!column_sym,  "([^a-zA-Z()]*).*", "\\1")
    ) |>  
    # Crear varias filas para cada valor en la columna separada por comas
    separate_rows({{ column }}, sep = ",") |> 
    # Asegurarse de que los valores sean numéricos, asignando 0 si no lo son
    mutate({{ column }} := as.numeric({{ column }})) |> 
    # Expandir las filas a columnas con indicadores binarios
    pivot_wider(
      names_from = {{ column }}, 
      names_prefix = "temp_prefix_",
      values_from = {{ column }}, 
      values_fn = ~1, 
      values_fill = 0
    ) |> 
    # Filtrar valores NA si la columna correspondiente existe
    mutate(across(starts_with("temp_prefix_"), ~if_else(temp_prefix_NA== 1, NA, .))) |> 
    # Eliminar las columnas no deseadas
    select(-any_of(c("temp_prefix_NA", "temp_prefix_0"))) |> 
    rename_with(
      ~gsub(paste0("^", "temp_prefix_"), "", .),  # Elimina el prefijo "disease_" si está presente
      starts_with("temp_prefix_")  # Aplica solo a columnas que empiezan con "disease_"
    ) |> 
    # Renombrar columnas según el mapa proporcionado
    rename_with(~ case_when(
     . %in% names(rename_map) ~ rename_map[.],
      TRUE ~ .
    ), everything())
  
  return(data_processed)
}
```

Change the dirty columns

```{r}
#Basic_disease column
rename_map <- c(
  "1" = "Hypertension",
  "2" = "Diabetes",
  "3" = "CVD",
  "4" = "Cerebrovascular",
  "5" = "COPD",
  "6" = "Immunodeficiency",
  "7" = "Malignant_tumor",
  "8" = "Other",
  "9" = "Chronic_Kidney"
)
data_clean3 <- process_dirty_cols(data, Basic_diseases, rename_map)

#Symptoms column
rename_map <- c(
  "1" = "Whole_body_symptoms",
  "2" = "Respiratory_symptoms",
  "3" = "Nervous_symptoms",
  "4" = "Cardiovascular_symptoms",
  "5" = "Gastrointestinal_symptoms",
  "6" = "Other_symptoms"
)
data_clean3 <- process_dirty_cols(data_clean3, Symptoms, rename_map)
```
