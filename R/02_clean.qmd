---
title: "Project"
author: "Miguel Blanco"
format: html
editor: visual
---

### Load libraries

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(readxl)
library(stringr)
library(cowplot)
```

### Load Data

```{r, warning=FALSE, message=FALSE}
data <- read_tsv("../data/01_dat_load.tsv")


```

### Eliminate Spaces

Lot of the columns of our data frame have names separated by spaces " ", than can bring problems when calling them after. To avoid that, we are going to replace all the spaces in the colnames with "\_"

```{r}
data <- data |> 
  #rename_with renames the colnames, use gsub to substitute " " with "_" in all 
  #the columns (.)
  rename_with(~ gsub(" ", "_", .))
```

### Manage nulls

```{r}

#Notice that na_if function has to work with the same type of values at the time. For example in this df we have both character and numeric values, so we have to do it in 2 times


#The function takes the data (data) and the vector of all the values that we want to be considered as NAs (na_vector). This na_vector should be specified as 
# c("null", "-"...)
NA_values_replace <- function(data, na_vector){
  data |> 
    mutate(across(where(is.character), ~ case_when 
          (. %in% na_vector ~ NA,
          TRUE ~ .
          )))
}

data <- NA_values_replace(data = data, 
                          na_vector = c("[null]", "/", "-"))

```

Proportions of NA in each column

```{r}

#The function takes the data as only argument and return the proportion of NA values of each column in the data 
NA_prop <- function(data) {
  data |> 
    select(where(anyNA)) |> 
    summarise(across(everything(), ~ mean(is.na(.)), .names = "{col}")) |> 
    pivot_longer(everything(), values_to = "na_proportion", names_to = "column")
}

data_NA_proportion <- NA_prop(data)
```

Remove title columns (All columns that have \> 0.95 of NA proportion)

```{r}
Title_columns <- data_NA_proportion |> 
  filter(na_proportion > 0.95) |> 
  pull(column)

data <- data |> 
  select(-all_of(Title_columns))
```

### Tidy columns

```{r}
#Change name to a shorter one for sintax conveniance
data_clean <- data |> 
  rename(Basic_diseases = `Basic_diseases_(1_hypertension,_2_diabetes,_3_cardiovascular_diseases,_4_cerebrovascular_diseases,_5_COPD,_6_immunodeficiency_(such_as_AIDS,_hormone,_immunosuppressant_use_history),_7_malignant_tumor,_8_other_9_chronic_kidney_disease`)
```

```{r}
data_clean <- data_clean |> 
  #Creates a new row for each number separated by a comma in the basic diseases column. For example if patient 1 have diseases 1,2,3 it will create 3 rows for that patient   with the exact same values in every column except "Basic disease" column, where there will be one row with value 1, other with 2 and other with 3.
  separate_rows(Basic_diseases, sep = ",") |> 
  
  # Now it creates a column Disease with the name that correspond to the number in the   column "Basic Diseases"
  mutate(
    Disease = case_when(
      Basic_diseases == "1" ~ "Hypertension",
      Basic_diseases == "2" ~ "Diabetes",
      Basic_diseases == "3" ~ "CVD",
      Basic_diseases == "4" ~ "Cerebrovascular",
      Basic_diseases == "5" ~ "COPD",
      Basic_diseases == "6" ~ "Immunodeficiency",
      Basic_diseases == "7" ~ "Malignant_tumor",
      Basic_diseases == "8" ~ "Other",
      Basic_diseases == "9" ~ "Chronic_Kidney",
      TRUE ~ "No_Value"),
    #In case that the value of the column is NA we want an NA value, else a 1
    Value = ifelse(Basic_diseases == "No_Value", NA, 1)
  ) |> 
  
  #Now we use a pivot wider to transform rows in coulmns
  pivot_wider(
    #Creates a column with each of the names in Diseases (one for each disease)
    names_from = Disease,
    #Insert the value from the column value, that will be 1 for every row
    values_from = Value,
    #Fill the observations that dont have a "Value" with a 0, as this are the observations that dont have the illness
    values_fill = 0 
  ) |> 
  
  #Now we have more than one row for each "Number", as one row for each number in BasicDisease column was created. Now we want to group those rows so we have only one row per observation
  group_by(Number) |>
  #Summarise and select the highest value for the columns between Hypertension and other (Columns created from BasicDisease column). Only one of the rows will have number 1 for the disease (if the observation had that disease) so we summarising we choose the highest value
  summarise(across(Hypertension : Other, ~ max(.x)),
        #Summarise eliminates all the columns where is not working, so we need to call summarise on all columns so they stay in the final df. Not apply it on the BasicDisease columns so they are not duplicated
         across(!c(Hypertension : Other), ~ first(.), .names = "{.col}")) |>
  ungroup() |> 
  #If the No value column is NA, all the values for the BasicDiseases created columns get NA value
  mutate(across(Hypertension : Other, ~ ifelse(is.na(No_Value), NA, .))) |> 
  #Now that we have used the No_value column, we can drop it 
  select(-No_Value)
```

### REDUCE AGE GROUPS

```{r}
View(data |> 
  count(`Age_ranges[years]`))
```

We will use case_when with str_detect to reduce the amount of age_ranges groups we have. We will stay with a group of \<60 years, \>90 years and groups of 10 years in between

```{r}
data_clean <- data_clean |> 
  mutate(`Age_ranges[years]` = case_when(
    str_detect(`Age_ranges[years]`, "^[0-5][0-9]-") ~ "<60",
    str_detect(`Age_ranges[years]`, "^6") ~ "60-70",
    str_detect(`Age_ranges[years]`, "^7") ~ "70-80",
    str_detect(`Age_ranges[years]`, "^8") ~ "80-90",
    str_detect(`Age_ranges[years]`, "^9") ~ ">90",
    str_detect(`Age_ranges[years]`, "^100") ~ ">90"
  ))
```

### Mortality column to binary

```{r}
data_clean <- data_clean |> 
  mutate(`Death_(1_Yes_2_No)` = case_when(
    `Death_(1_Yes_2_No)` == "2" ~ "0",
    TRUE ~ "1"
  )) |> 
  rename(Death = `Death_(1_Yes_2_No)`)
```

### Visualize Mortality rate per age group

#### Prepare dataset

```{r}
mortality_summary <- data_clean |> 
  group_by(`Age_ranges[years]`, Death) |> 
  summarise(Count = n()) |>
  mutate(`Age_ranges[years]` = factor(`Age_ranges[years]`, levels = c("<60", "60-70", "70-80","80-90", ">90"))) |> 
  mutate(Percentage = round((Count/ sum(Count)) * 100, digits = 1)) |> 
  ungroup()
```

#### Total death per age_group barplot

```{r}


ggplot(mortality_summary, 
       mapping = aes( x= `Age_ranges[years]`, y = Count, fill = Death))+
  geom_bar(stat = "identity", position = "dodge")+
  scale_fill_manual(
    values = c("0" = "blue", "1" = "red"),
    labels = c("0" = "Survived", "1" = "Dead")
  )+
  labs(
    title = "Mortality per age group",
    fill = "Outcome",
    x = "Age Groups"
  )+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold")
  )




```

#### Death rate per age_group barplot

```{r}
ggplot(mortality_summary, 
       mapping = aes( x= `Age_ranges[years]`, y = Percentage, fill = Death))+
  geom_bar(stat = "identity", position = "dodge")+
  scale_fill_manual(
    values = c("0" = "blue", "1" = "red"),
    labels = c("0" = "Survived", "1" = "Dead")
  )+
  labs(
    title = "Mortality Rate per age group",
    fill = "Outcome",
    x = "Age Groups",
    y = "%"
  )+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
```

### Hospitalization time Vs Outcome

```{r}
ggplot(data = data_clean,
       mapping = aes(x = Death,
                     y = `Hospitalization_time[days]`,
                     fill = Death))+
  geom_boxplot()+
  scale_fill_manual(
    labels = c("0" = "Survive", "1" = "Died"),
    values = c("0" = "blue", "1" = "red"))+
  labs(
    title = "Death Vs Hospitalization Time Boxplot",
    x = "Outcome",
    y = "Hospitalization Time"
  )+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
  

  
```

```{r}
ggplot(data = data_clean,
       mapping = aes(x = `Hospitalization_time[days]`,
                     fill = Death))+
  geom_density(alpha = 0.5)+
  scale_fill_manual(
    labels = c("0" = "Survive", "1" = "Died"),
    values = c("0" = "blue", "1" = "red"))+
  labs(
    title = "Death Vs Hospitalization Time Boxplot",
    x = "Hospitalization Time",
    y = "Density"
  )+
  theme_minimal()+
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold")
  )
```
