---
title: "Project"
author: "Miguel Blanco, Xavi Chapatte, Luis Martín"
format: html
editor: visual
---

### Load libraries

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(readxl)
library(stringr)

```

Load Data

```{r, warning=FALSE, message=FALSE}
data <- read_tsv("../data/01_dat_load.tsv")
```

Change values \[null\] for NAs

```{r}

#Notice that na_if function has to work with the same type of values at the time. For example in this df we have both character and numeric values, so we have to do it in 2 times


#The function takes the data (data) and the vector of all the values that we want to be considered as NAs (na_vector). This na_vector should be specified as 
# c("null", "-"...)
NA_values_replace <- function(data, na_vector){
  data |> 
    mutate(across(where(is.character), ~ case_when 
          (. %in% na_vector ~ NA,
          TRUE ~ .
          )))
}

data <- NA_values_replace(data = data, 
                          na_vector = c("[null]", "/", "-"))

```

Proportions of NA in each column

```{r}

#The function takes the data as only argument and return the proportion of NA values of each column in the data 
NA_prop <- function(data) {
  data |> 
    select(where(anyNA)) |> 
    summarise(across(everything(), ~ mean(is.na(.)), .names = "{col}")) |> 
    pivot_longer(everything(), values_to = "na_proportion", names_to = "column")
}

data_NA_proportion <- NA_prop(data)
```

Filter out columns with > 0.95 of NAs (This columns are meant to split the data and are empty, the only values are notes about the patients)

Remove empty columns that were introduced as separators. 
```{r}
data <- data |> 
  select(-"Pulmonary CT condition",
         -"D1 blood routine upon admission",
         -"D7 blood routine",
         -"Liver enzyme D1",
         -"Coagulation index D1",
         -"Inflammatory indicator D1",
         -"Blood gas analysis",
         -"Virus nucleic acid test CT value",
         -"D3 time division (3 light, 3 medium, 3 heavy, and 4 critical)",
         -"Antiviral drugs (1 nema 0 no)", 
         -"Hormones (1 Yes 0 No)", 
         -"PCT greater than 0.5",
         -"PCT greater than 2", 
         -"PCT greater than 10", 
         -"Azvudine (1 is 0)",
         -"D3 time division (3 light, 3 medium, 3 heavy, and 4 critical)",
         -"Immunotherapy (1 Yes 0 No)",
         -"Use or D1- initial positive longer than 5d",
         -"Age over 65(1,YES; 2, NO)")
```

Relocate columns Age range and Age over 65 to the first columns of the dataset.



```{r}
data <- data |> 
  relocate("Age ranges[years]", .after = "Number")
```

Rename some columns

```{r}
data <- data |> 
  rename(
    "Basic_diseases" = "Basic diseases (1 hypertension, 2 diabetes, 3 cardiovascular diseases, 4 cerebrovascular diseases, 5 COPD, 6 immunodeficiency (such as AIDS, hormone, immunosuppressant use history), 7 malignant tumor, 8 other 9 chronic kidney disease",
    "Age range" = "Age ranges[years]",
    "Fever days" = "Fever days (D1-D7)[days]",
    "Affected lung lobes 1" = "Number of affected lung lobes 1",
    "Affected lung lobes 2" = "Number of affected lung lobes 2",
    "Imaging Improvement>25% (after 1 week)" = "Does the imaging improve by more than 25% after one week (1 yes 2 no)",
    "APACHE Score (ICU Admission)" = "APACHEII score (admission to ICU)",
    "Usage days" = "Usage days[days]",
    "Hormone usage days" = "Hormone usage days[days]",
    "Anticoagulant days" = "Anticoagulant days[days]",
    "Death" = "Death (1 Yes 2 No)",
    "Symptoms" = "Symptoms (1. Whole body, 2. Respiratory, 3. Nervous, 4. Cardiovascular, 5. Gastrointestinal, 6. Other)",
    "Antiviral Drug" = "Antiviral drugs (1 nema, 2 azides, 3 others)",
    "Administration method" = "Administration method (1 oral and 2 nasal feeding)",
    "Hormones" = "Hormones (1 methylprednisolone, 2 dexamethasone, 3 others)",
    "Hospitalization days" = "Hospitalization time[days]",
    "ICU hospitalization days" = "ICU hospitalization time[days]",
    "Prone position ventilation" = "Prone position ventilation (1 yes 0 no)",
    "Mechanical ventilation days" = "Mechanical ventilation time (days)",
    "D1_oxygen_therapy_mode"
 = "D1 oxygen therapy mode (1. Mask 2. High flow oxygen therapy 3. Non invasive 4. Invasive 5. ECMO)",
 "Antibiotics" = "Antibiotics (1 Yes 2 No)",
 "Immunotherapy" = "Immunotherapy (1 Tor 2 Bar)",
 "Medication days" = "Medication- D1[days]",
 "Negative conversion" = "Negative conversion(1, Yes; 0,No)"
 )
```

Create function to change dirty columns with multiple values to clean binary columns

```{r}
process_dirty_cols <- function(data, column, rename_map) {
  column_sym <- ensym(column)
  
  data_processed <- data |> 
    mutate(
      !!column_sym := str_replace_all(!!column_sym, "([^a-zA-Z()]*).*", "\\1")
    ) |>  
    # Crear varias filas para cada valor en la columna separada por comas o signos +
    separate_rows({{ column }}, sep = "[,+]") |> 
    # Asegurarse de que los valores sean numéricos, asignando 0 si no lo son
    mutate({{ column }} := as.numeric({{ column }})) |> 
    # Expandir las filas a columnas con indicadores binarios
    pivot_wider(
      names_from = {{ column }}, 
      names_prefix = "temp_prefix_",
      values_from = {{ column }}, 
      values_fn = ~1, 
      values_fill = 0
    )
  
  # Si la columna 'temp_prefix_NA' existe, filtrar sus valores
  if ("temp_prefix_NA" %in% names(data_processed)) {
    data_processed <- data_processed |> 
      mutate(across(starts_with("temp_prefix_"), ~if_else(temp_prefix_NA == 1, NA, .))) |> 
      select(-any_of(c("temp_prefix_NA", "temp_prefix_0")))
  } else {
    # Si no existe, simplemente eliminamos la columna 'temp_prefix_0' (si está presente)
    data_processed <- data_processed |> 
      select(-any_of(c("temp_prefix_0")))
  }
  
  # Renombrar columnas según el mapa proporcionado
  data_processed <- data_processed |> 
    rename_with(
      ~gsub(paste0("^", "temp_prefix_"), "", .),  # Elimina el prefijo "temp_prefix_" si está presente
      starts_with("temp_prefix_")
    ) |> 
    rename_with(~ case_when(
      . %in% names(rename_map) ~ rename_map[.],
      TRUE ~ .
    ), everything())
  
  return(data_processed)
}
```


Remove the spaces between characters on the names of the columns
```{r}
data <- data |> 
  #rename_with renames the colnames, use gsub to substitute " " with "_" in all 
  #the columns (.)
  rename_with(~ gsub(" ", "_", .))
```

Change the ages ranges from 5-years to 10-years

```{r}
data <- data |> 
    mutate(`Age_range` = case_when(
    str_detect(`Age_range`, "^[0-5][0-9]-") ~ "<60",
    str_detect(`Age_range`, "^6") ~ "60-70",
    str_detect(`Age_range`, "^7") ~ "70-80",
    str_detect(`Age_range`, "^8") ~ "80-90",
    str_detect(`Age_range`, "^9") ~ ">90",
    str_detect(`Age_range`, "^100") ~ ">90"
  )) |> 
  mutate(`Age_range` = fct_relevel(`Age_range`, "<60", "60-70", "70-80", "80-90", ">90"))
```

Eliminate comments written after numerical values and round large decimal values

```{r}
data <- data |>  
  mutate(`ICU_hospitalization_days` = as.numeric(gsub("[^0-9\\.]", "", `ICU_hospitalization_days`))) |> 
  mutate(`Hormone_dosage[mg]` = as.numeric(gsub("[^0-9\\.]", "", `Hormone_dosage[mg]`))) |> 
  mutate(`NRL[%]` = round(as.numeric(`NRL[%]`), 2))
```


Change the dirty columns

```{r}
#Basic_disease column
rename_map <- c(
  "1" = "Hypertension_disease",
  "2" = "Diabetes_disease",
  "3" = "CVD_disease",
  "4" = "Cerebrovascular_disease",
  "5" = "COPD_disease",
  "6" = "Immunodeficiency_disease",
  "7" = "Malignant_tumor_disease",
  "8" = "Other_disease",
  "9" = "Chronic_Kidney_disease"
)
data <- process_dirty_cols(data, Basic_diseases, rename_map)

#Symptoms column
rename_map <- c(
  "1" = "Whole_body_symptoms",
  "2" = "Respiratory_symptoms",
  "3" = "Nervous_symptoms",
  "4" = "Cardiovascular_symptoms",
  "5" = "Gastrointestinal_symptoms",
  "6" = "Other_symptoms"
)
data <- process_dirty_cols(data, Symptoms, rename_map)

#D1_oxygen_therapy_mode
rename_map <- c(
  "1" = "Mask_Oxygen_therapy",
  "2" = "NonInvasive_Oxygen_therapy",
  "3" = "HighFlow_Oxygen_therapy",
  "4" = "Invasive_Oxygen_therapy",
  "5" = "ECMO"
)
data <- process_dirty_cols(data, D1_oxygen_therapy_mode, rename_map)
```

Change numeric values for words values

```{r}
data <- data |> 
  mutate(`Antiviral_Drug` = case_when(
    `Antiviral_Drug` == 0 ~ "None",
    `Antiviral_Drug` == 1 ~ "Paxlovid",
    `Antiviral_Drug` == 2 ~ "Azduvine",
    `Antiviral_Drug` == 3 ~ "Other",
    TRUE ~ NA_character_
  )) |> 
    mutate(`Administration_method` = case_when(
    `Administration_method` == 1 ~ "Oral feeding",
    `Administration_method` == 2 ~ "Nasal Feeding",
    TRUE ~ NA_character_
  )) |>
    mutate(`Hormones` = case_when(
    `Hormones` == 1 ~ "Methylprednisolone",
    `Hormones` == 2 ~ "Dexamethasone",
    `Hormones` == 3 ~ "Other",
    TRUE ~ NA_character_
  )) |>
  mutate(`Immunotherapy` = case_when(
    `Immunotherapy` == 1 ~ "Tocilizumab",
    `Immunotherapy` == 2 ~ "Baricitinib",
    `Immunotherapy` == 0 ~ "None",
    TRUE ~ NA_character_
  ))
```

Pulishing binary values (0-1, 1-2 and yes-no)

```{r}
data <- data |> 
  mutate(`Death` = case_when( 
    `Death` == 1 ~ "1",
    `Death` == 2 ~ "0",
    TRUE ~ NA_character_
  )) |> 
  mutate(`Prone_position_ventilation` = case_when(
    `Prone_position_ventilation` == 1 ~ "yes",
    `Prone_position_ventilation` == 0 ~ "no",
    TRUE ~ NA_character_
  )) |> 
  mutate(`Antibiotics` = case_when(
    `Antibiotics` == 1 ~ "yes",
    `Antibiotics` == 2 ~ "no",
    TRUE ~ NA_character_
  )) |> 
  mutate(`Imaging_Improvement>25%_(after_1_week)` = case_when(
    `Imaging_Improvement>25%_(after_1_week)` == 1 ~ "yes",
    `Imaging_Improvement>25%_(after_1_week)` == 2 ~ "no",
    TRUE ~ NA_character_
  )) |> 
  mutate(`Negative_conversion` = case_when(
    `Negative_conversion` == 1 ~ "yes",
    `Negative_conversion` == 0 ~ "no",
    TRUE ~ NA_character_
  ))
```

Some column-specific modifications

```{r}
#remove and 'Unknown' value for an NA value in Usage_days column
data <- data |> 
  mutate(Usage_days = na_if(Usage_days, "unknown"))

#Modify the Hormone_usage_days column 
data <- data |> 
  #convert to NA if the value of column hormone is also NA
  mutate(Hormone_usage_days = if_else(is.na(Hormones), NA, Hormone_usage_days)) |> 
  #Change two dirty non-numerical values to numerical values
  mutate(
  Hormone_usage_days = if_else(
    Hormone_usage_days == '4 (40mg)+3 (20mg)+4 (10mg)',
    "11",  # Convertir a carácter
    Hormone_usage_days
  )
) |> 
  mutate(
  Hormone_usage_days = if_else(
    Hormone_usage_days == '6+',
    "6",  # Convertir a carácter
    Hormone_usage_days
  )
) |> 
  #Unify the annotation of text value that are express long treatment in different ways to one the same 'long treatment' values
    mutate(
    Hormone_usage_days = if_else(
      grepl("[a-zA-Z]", Hormone_usage_days), 
      "long treatment",                     
      Hormone_usage_days                    
    )
  )
```

Save the data

```{r}
# Save the data as a TSV file
clean_dir <- "../data"
tsv_file <- file.path(clean_dir, "02_dat_clean.tsv")

# Check if the directory exists, create it if not
if (!dir.exists(clean_dir)) {
  dir.create(clean_dir, recursive = TRUE) 
}
#write tsv data
write.table(data, file = tsv_file, sep = "\t", row.names = FALSE)
```



