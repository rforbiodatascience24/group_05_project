---
title: "Analysis"
author: "Miguel Blanco"
format: html
editor: visual
---

```{r}
library(purrr)
library(broom)
```

# Load Data

```{r}
data <- read_tsv(file = "../data/03_data_augmented.tsv")
```

## PCA

### Select numeric columns and normalize

#### Drop NAs (Pass to 02_clean)

```{r}
data_NA_proportion <- NA_prop(data)

columns_todrop <- data_NA_proportion |> 
  filter(na_proportion > 0.1) |> 
  pull(column)

pca_data <- data |> 
  select(-columns_todrop)
```

### Transform columns to numeric

```{r}
pca_data <- pca_data |> 
  select(-Number, -`Age_over_65(1,YES;_2,_NO)`, -Age_range, -ECMO) |> 
  mutate(across(where(is.character), ~ as.numeric(.)))

numeric_scaled_data <- pca_data |> 
  select(where(is.numeric)) |> 
  drop_na() |> 
  scale() |> 
  as.data.frame()
```

```{r}
pca_result <- prcomp(numeric_scaled_data)
```

```{r}
explained_variance <- data.frame(
  PC = paste0("PC", 1:length(pca_result$sdev)),
  Variance = (pca_result$sdev^2) / sum(pca_result$sdev^2))


```

## Find Outcome most Correlated Variable

```{r}
data <- data |> 
  mutate(Death = as.factor(Death))
```

```{r}
data_numeric <- data |> 
  mutate(across(everything(), as.numeric))
```

```{r}
data_numeric_NAs <- NA_prop(data_numeric)

numeric_column_to_drop <- data_numeric_NAs |> 
  filter(na_proportion > 0.35) |> 
  pull(column)

data_numeric <- data_numeric |> 
  select(-any_of(numeric_column_to_drop))

data_numeric <- as.data.frame(scale(data_numeric))
```

```{r}
results <- data_numeric |> 
  select(-Death) |>  
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") |> 
  group_by(variable) |> 
  summarise(
    model = list(glm(Death ~ value, data = data, family = binomial))
  )
```

```{r}
results_tidy <- results |> 
  mutate(
    model_summary = map(model, ~ tidy(.x, conf.int = TRUE))
  ) |> 
  unnest(model_summary) |>
  #Get only the slope, not the intercept
  filter(term == "value") |> 
  select(variable, p.value, estimate, conf.low, conf.high) |> 
  mutate(q.value = p.adjust(p.value, method = "BH"))
```

```{r}
significant_variables <- results_tidy |> 
  filter(q.value < 0.05) |> 
  mutate(OR = exp(estimate))
  
```

### Abreviate variables for plotting

### D

```{r}
ggplot(significant_variables, 
       mapping = aes(x = estimate, 
                     y = variable, 
                     color = q.value, 
                     size = abs(estimate))) +
  geom_point() +
  geom_text(aes(label = variable), hjust = -0.2, size = 3) +  # Add variable names to dots
  scale_color_gradient(low = "blue", high = "red", name = "q-value") +
  labs(
    title = "Effect Sizes and Significance for Death Prediction",
    x = "Effect Size (Log-Odds)",
    y = NULL,  # Remove the y-axis label
    size = "Effect Strength"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "right",
    axis.text.y = element_blank()
  )
```
